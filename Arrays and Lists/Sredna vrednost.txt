/* Средна вредност Problem 1 (1 / 1) 
За дадена низа од N (1?N?50) природни броеви, да се најде бројот кој е најблиску до нивниот просек. Ако постојат два броја со исто растојание до просекот, да се врати помалиот од нив. На пример за низата 1, 2, 3, 4, 5 просекот е (1 + 2 + 3 + 4 + 5) / 5 = 15 / 5 = 3, што значи дека бројот кој треба да се врати и е најблиску до просекот е 3.

За низата 1, 2, 3, 4, 5, 6 просекот е 3.5 и двата броја 3 и 4 се на исто растојание од просекот. Точната вредност која треба да се врати е помалиот од нив, а тоа е 3.

Во низата може да има дупликати.

Првиот број од влезот е бројот на елементи во низата N, а потоа во секој ред се дадени броевите.

Име на класата (Java): Array

**Забелешка:** Да се креира податочна структура низа и истата да се искористи во задачата. */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
 
public class Array<E> {
 
    private E data[];
    private int size;
 
    public Array(int size) {
        data = (E[]) new Object[size];
        this.size = size;
    }
 
    public static int brojDoProsek(Array<Integer> a) {
        //Vashiot kod tuka...
        int z = 0, n = a.getLength();
        float najblisku = 0;
        for (int i = 0; i < a.getLength(); i++)
            z = z + a.get(i);
        float prosek = (float) z / n;
        float naj = prosek;
        for (int i = 0; i < n; i++) {
            if ((float) a.get(i) == prosek) {
                najblisku = a.get(i);
                break;
            } else if (a.get(i) > prosek) {
                if ((a.get(i) - prosek) < naj) {
                    naj = a.get(i) - prosek;
                    najblisku = a.get(i);
                }
            } else {
                if (prosek - a.get(i) <= naj) {
                    naj = prosek - a.get(i);
                    najblisku = a.get(i);
                }
            }
        }
        return (int) najblisku;
    }
 
    public static void main(String[] args) throws IOException {
        BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
        String s = stdin.readLine();
        int N = Integer.parseInt(s);
 
        //Vashiot kod tuka...
        Array<Integer> niza = new Array<Integer>(N);
        for (int i = 0; i < N; i++) {
            String p = stdin.readLine();
            int element = Integer.parseInt(p);
            niza.set(i, element);
        }
        //
        System.out.println(brojDoProsek(niza));
    }
 
    public void set(int position, E o) {
        data[position] = o;
    }
 
    public E get(int position) {
        return data[position];
    }
 
    public void delete(int position) {
        if (position >= 0&&position < size) {
            E[] newData = (E[]) new Object[size - 1];
            for (int i = 0; i < position; i++)
                newData[i] = data[i];
            for (int i = position + 1; i < size; i++)
                newData[i - 1] = data[i];
            data = newData;
            size = size - 1;
        }
    }
 
    public int find(E o) {
        for (int i = 0; i < size; i++)
            if (o.equals(data[i]))
                return i;
        return -1;
    }
 
    public int getLength() {
        return size;
    }
 
    public void insert(int position, E o) {
        if (position >= 0 && position <= size) {
            E[] newData = (E[]) new Object[size + 1];
            for (int i = 0; i < position; i++)
                newData[i] = data[i];
            newData[position] = o;
            for (int i = position; i < size; i++)
                newData[i + 1] = data[i];
            data = newData;
            size = size + 1;
        }
    }
 
    public void resize(int newSize) {
        E[] newData = (E[]) new Object[newSize];
        int copySize = size;
        if (newSize < size)
            copySize = newSize;
        for (int i = 0; i < copySize; i++)
            newData[i] = data[i];
        data = newData;
        size = newSize;
    }
}
